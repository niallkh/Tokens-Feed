package com.github.nailkhaf.data.tokens

import com.github.nailkhaf.data.tokens.tokenlist.TokenListProvider
import com.github.nailkhaf.database.Database
import com.github.nailkhaf.web3.Web3Provider
import com.github.nailkhaf.web3.contracts.Multicall3
import com.github.nailkhaf.web3.models.decodeAddress
import com.ionspin.kotlin.bignum.integer.BigInteger
import com.squareup.sqldelight.db.SqlDriver
import com.squareup.sqldelight.sqlite.driver.JdbcSqliteDriver
import io.mockk.coEvery
import io.mockk.every
import io.mockk.mockkClass
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.flow.flowOf
import kotlinx.coroutines.runBlocking
import okio.ByteString.Companion.decodeHex
import org.junit.Test
import org.koin.core.context.startKoin
import org.koin.core.context.stopKoin
import org.koin.test.KoinTest
import org.koin.test.get
import org.koin.test.mock.MockProvider
import org.koin.test.mock.declare
import org.koin.test.mock.declareMock
import kotlin.test.AfterTest
import kotlin.test.BeforeTest
import kotlin.test.assertEquals

private val ACCOUNT = "0xcf4B8167378be0503f5674494188a89a1F401D44".decodeAddress()

class ERC20TokensRepositoryTest : KoinTest {

    init {
        MockProvider.register { mockkClass(it) }
    }

    @BeforeTest
    fun setup() {
        startKoin { modules(tokensModule) }
        declare<SqlDriver> {
            JdbcSqliteDriver(JdbcSqliteDriver.IN_MEMORY)
                .also { Database.Schema.create(it) }
        }
        declareMock<TokenListProvider> {
            every { this@declareMock.invoke(any()) } returns flowOf(TOKEN_LIST)
        }
    }

    @AfterTest
    fun clean() {
        stopKoin()
    }

    @Test
    fun `detect new erc20 tokens and get balances`() {
        declareMock<Web3Provider> {
            coEvery { ethCall(1uL, Multicall3.address, any()) }
                .returns(TOKEN_ALL_BALANCES_RESPONSE)
                .andThen(TOKEN_CHAIN_DATA_RESPONSE)
                .andThen(TOKEN_DETECTED_BALANCES_RESPONSE)
        }

        runBlocking {
            val tokensRepository = get<ERC20TokensRepository>()
            tokensRepository.detectNewERC20Tokens(1u, ACCOUNT)
            val balances = tokensRepository.getTokenBalances(1u, ACCOUNT).first()
            assertEquals(4, balances.size)
            assertEquals(BigInteger(2635296952), balances[3].balance)
        }
    }
}

private val TOKEN_LIST = listOf(
    "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48".decodeAddress(),
    "0xdAC17F958D2ee523a2206206994597C13D831ec7".decodeAddress(),
    "0x6B175474E89094C44Da98b954EedeAC495271d0F".decodeAddress(),
    "0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984".decodeAddress(),
    "0x4Fabb145d64652a948d72533023f6E7A623C7C53".decodeAddress(),
)

private val TOKEN_ALL_BALANCES_RESPONSE =
    "0000000000000000000000000000000000000000000000000000000001032bb900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000005773b20000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000009be243b800000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000003c2fa317d1017b2c00000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000a92d9dc1a788695e7"
        .decodeHex()

private val TOKEN_DETECTED_BALANCES_RESPONSE =
    "0000000000000000000000000000000000000000000000000000000001032c0ea92d9dc1a788695e700000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000003c2fa317d1017b2c000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000005773b20000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000009d1370b8"
        .decodeHex()

private val TOKEN_CHAIN_DATA_RESPONSE =
    "0000000000000000000000000000000000000000000000000000000001032bbc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000cf696ea546574686572205553440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000004555344540000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000e44616920537461626c65636f696eb42696e616e
        .decodeHex()