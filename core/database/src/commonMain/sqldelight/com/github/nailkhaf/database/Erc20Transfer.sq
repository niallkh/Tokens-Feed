import com.ionspin.kotlin.bignum.integer.BigInteger;
import okio.ByteString;

CREATE TABLE Erc20Transfer (
    erc20TransferId INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    erc20TokenId    INTEGER NOT NULL REFERENCES Erc20Token (erc20TokenId) ON DELETE CASCADE ON UPDATE CASCADE,
    txHash          BLOB AS ByteString NOT NULL,
    logIndex        INTEGER NOT NULL,
    timestamp       INTEGER NOT NULL,
    fromAddress     BLOB AS ByteString NOT NULL CHECK (length(fromAddress) == 20),
    toAddress       BLOB AS ByteString NOT NULL CHECK (length(fromAddress) == 20),
    value           BLOB AS BigInteger NOT NULL
);

CREATE UNIQUE INDEX erc20_transfer_unique ON Erc20Transfer (txHash, logIndex);
CREATE INDEX erc20_transfer_timestamp ON Erc20Transfer (timestamp);
CREATE INDEX erc20_transfer_from ON Erc20Transfer (fromAddress);
CREATE INDEX erc20_transfer_to ON Erc20Transfer (toAddress);

insert:
INSERT INTO Erc20Transfer(erc20TokenId, txHash, logIndex, timestamp, fromAddress, toAddress, value)
VALUES (?, ?, ?, ?, ?, ?, ?);

getTransferId:
SELECT erc20TransferId
FROM Erc20Transfer
WHERE txHash=:txHash
AND logIndex=:logIndex;

selectAll:
SELECT *
FROM Erc20Transfer
INNER JOIN Erc20Token USING (erc20TokenId)
WHERE chainId IN :chainIds
AND (fromAddress=:account OR toAddress=:account)
ORDER BY timestamp DESC;

